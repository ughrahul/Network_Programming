#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/wait.h>

#define PORT 8080

int main()
{
    int listenfd, connfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Create socket
    listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd == -1)
    {
        perror("Socket creation failed");
        exit(1);
    }

    // Configure server address structure
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind socket to the address and port
    if (bind(listenfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
    {
        perror("Bind failed");
        close(listenfd);
        exit(1);
    }

    // Start listening for incoming connections
    if (listen(listenfd, 5) == -1)
    {
        perror("Listen failed");
        close(listenfd);
        exit(1);
    }

    printf("Server is listening on port %d...\n", PORT);

    while (1)
    {
        // Accept a new client connection
        connfd = accept(listenfd, (struct sockaddr *)&client_addr, &addr_len);
        if (connfd == -1)
        {
            perror("Accept failed");
            continue;
        }

        // Create a child process to handle the client connection
        pid_t pid = fork();
        if (pid == 0)
        {
            // Child process
            close(listenfd); // Close the listening socket in the child process as it is not needed
            char buffer[1024] = {0};

            // Read data from the client
            read(connfd, buffer, sizeof(buffer));
            printf("Client: %s\n", buffer);

            // Send response to the client
            write(connfd, "Hello from server\n", 18);

            // Close the client connection and exit
            close(connfd);
            exit(0);
        }
        else if (pid > 0)
        {
            // Parent process
            close(connfd); // Close the connected socket in the parent process
            wait(NULL);    // Wait for the child process to finish and clean up its resources
        }
        else
        {
            perror("Fork failed");
            close(connfd);
        }
    }

    // Close the listening socket before exiting
    close(listenfd);
    return 0;
}
